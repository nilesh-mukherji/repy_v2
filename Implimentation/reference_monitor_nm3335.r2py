TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file...
    if create:
        if self.Afn in listfiles():
            self.Afile = openfile(self.Afn,create)
            self.Bfile = openfile(self.Bfn,create)
            self.Bfile.writeat(self.Afile.readat(None, 0), 0)
        else:
            self.Afile = openfile(self.Afn,create)
            self.Bfile = openfile(self.Bfn,create)
            self.Afile.writeat('SE', 0)

    else:
        if self.Afn in listfiles():
            self.Afile = openfile(self.Afn,create)
            self.Bfile = openfile(self.Bfn,create)
            self.Bfile.writeat(self.Afile.readat(None, 0), 0)
        else:
            #log("File Not Found");
            pass

          



  def writeat(self,data,offset):
    # Write to B file using the sandbox's writeat
    self.lock = createlock()
    self.lock.acquire(True)
    if offset < 0:
        #log("Offset < 0")
        self.lock.release()
    elif offset > len(self.Bfile.readat(None,0)):
        #log("Offset longer than file")
        self.lock.release()
    else:
      self.Bfile.writeat(data,offset)
      self.lock.release() 
  



  def readat(self,bytes,offset):
    self.lock = createlock()
    self.lock.acquire(True)
    length = len(self.Afile.readat(None,0))
    if offset < 0 or length < 0:
      #log("Invalid parameters")
      self.lock.release()
    elif offset >= len(self.Afile.readat(None,0)):
      #log("Area of file doesn't exist")
      self.lock.release()
    elif bytes > length and bytes != None:
      #log("Area of file doesn't exist")
      self.lock.release()
    elif (len(self.Afile.readat(None,0)) < offset+length) and bytes != None:
      #log("Invalid parameters")
      self.lock.release()
    else:
      try:
        read_data = self.Afile.readat(bytes,offset)
        self.lock.release()
        return read_data
      except:
        #log("error")
        self.lock.release()



  # Write with B if both are valid, write with A if B is invalid
  def close(self):
    try:
      backup = self.Afile.readat(None,0)
      data = self.Bfile.readat(None,0)
      backupfile = self.Afn
      if self.Bfile.readat(None,0).startswith("S") and self.Bfile.readat(None,0).endswith("E"):
        #B is Valid: Discard Older Version
        self.Afile.close()
        self.Bfile.close()
        #removefile(self.Afn)
        openfile(backupfile,True).writeat(data,0)
        #removefile(self.Bfn)
      else:
        #B is Invalid -> Discard Invalid File
        self.Afile.close()
        self.Bfile.close()
        #removefile(self.Afn)
        openfile(backupfile,True).writeat(backup_data,0)
        #removefile(self.Bfn)
    except:
      pass



def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()